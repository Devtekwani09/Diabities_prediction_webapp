# -*- coding: utf-8 -*-
"""project - diabities prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sUWVBJBS5AJhYx_rnUJRXf8mqJbiPmyo
"""

#importing libraries
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""data collection and analysis

"""

#loading dataset
diabities_data = pd.read_csv(r"C:\\Users\\Neeraj\\Downloads\\diabetes(1).csv")

diabities_data.head()

diabities_data.shape

#getting the stats measures of data
diabities_data.describe()

diabities_data['Outcome'].value_counts()

"""0 ------> non - diabitic

1-------> diabitic
"""

diabities_data.groupby('Outcome').mean()

#seperating data and labels
x = diabities_data.drop(columns='Outcome', axis=1)
y = diabities_data['Outcome']

print(x)

print(y)

"""data standardization"""

scaler = StandardScaler()

scaler.fit(x)

standard_data = scaler.transform(x)

print(standard_data)

x = standard_data

print(x)

print(y)

"""spliting data"""

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, stratify=y, random_state=2 )

print(x.shape, x_train.shape, x_test.shape)

"""training the model

"""

classifier = svm.SVC(kernel='linear')

#training the svm classifier
classifier.fit(x_train, y_train)

"""model evaluation

finding accuracy score
"""

#accuracy score on training data
x_train_prediction = classifier.predict(x_train)
train_data_accuracy = accuracy_score(x_train_prediction, y_train)

print("accuracy of the training data:", train_data_accuracy)

#accuracy score on test data
x_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print("accuracy of the test data: ", test_data_accuracy)

"""making a prediction system"""

def predict_(input_data): 
  #changing the data into numpy array
  input_dataas_array = np.asarray(input_data)
  #reshape the array for one instance
  input_data_reshaped = input_dataas_array.reshape(1,-1)
  #standardized the input data
  std_data = scaler.transform(input_data_reshaped)

  prediction = classifier.predict(std_data)

  return prediction

